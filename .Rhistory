sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2))
semd <- sp*sqrt(1/n1 + 1/n2)
md + c(1,-1)*qt(.975,n1+n2-2)*semd
md <- m2 - m1
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2))
semd <- sp*sqrt(1/n1 + 1/n2)
md + c(1,-1)*qt(.975,n1+n2-2)*semd
n1 <- 9
n2 <- 9
m1 <- -3
s1 <- 1.5
m2 <- 1
s2 <- 1.8
md <- m1 - m2
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2))
semd <- sp*sqrt(1/n1 + 1/n2)
md + c(1,-1)*qt(.95,n1+n2-2)*semd
qnorm(.95,mean=30,sd=1)
pnorm(.95,mean=30,sd=1)
pnorm(.95,mean=12,sd=4)
(pnorm(.95,mean=12,sd=4)*.4) + 12
(1.645*0.4) + 12
qnorm(.95,mean=12,sd=4)
qnorm(.95,mean=12,sd=.4)
g1 <- c(140,138,150,148,135)
g2 <- c(132,135,151,146,130)
n1 <- length(g1)
n2 <- length(g2)
sp <- sqrt(((n1-1)*sd(g1)^2 + (n2-1)*sd(g2)^2)/(n1+n2-2))
md <- mean(g1) - mean(g2)
semd <- sp*sqrt(1/n1 + 1/n2)
t.text(g1-g2)
t.test(g1-g2)
qnorm(0.975,1,1)
qnorm(0.95,1,1)
1100 + 2.959964*10
1100 - 2.959964*10
1100 + 2.644854*10
1100 - 2.644854*10
1100 - 2.093*10
1100 + 2.093*10
?pbinom()
binom.test(3, 24, 0.5, alternative="one.sided")
binom.test(3, 24, 0.5)
binom.test(3, 4, 0.5)
binom.test(10, 1787, 0.1)
binom.test(10, 1787, 0.01)
n1 <- 9
n2 <- 9
m1 <- -3
m2 <- 1
s1 <- 1.5
s2 <- 1.8
sqrt(((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2))
sp <- sqrt(((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2))
semd <- sp*sqrt(1/n1 + 1/n2)
md <- m1 - m2
pnorm(md,semd)
t <- md/semd
pt(t,df=pmin(n1,n2)-1)
power.t.test(n = 100, delta=.1 , sd=.04 , type = “one.sample”, alt= “one.sided”)$power
power.t.test(n = 100, delta=.1 , sd=.04)$power
power.t.test(n = 100, delta=.01 , sd=.04)$power
power.t.test(n = 100, delta=.01 , sd=.04)
power.t.test(n = 100, delta=.01 , sd=.04, alt = "less")$power
power.t.test(n = 100, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 50, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 200, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 250, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 300, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 290, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 288, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 285, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 284, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 282, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 280, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 276, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 272, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 274, delta=.01 , sd=.04, alt = "one.sided")$power
power.t.test(n = 275, delta=.01 , sd=.04, alt = "one.sided")$power
xbar = 44
mu0 = 42.04
sigma = 12
n = 288
z = (xbar−mu0)/(sigma/sqrt(n))
z
alpha = .05
z.half.alpha = qnorm(1−alpha/2)
pval = 2 ∗ pnorm(z)
pvak
pval
norm.test()
pnorm()
1.645*.4
qnorm(.95,12,.4)
12-.0658
12-.658
qt(c(.025,.975),df=8)
1100 = 23
1100 + 23
binom.test(3, 4, p = 0.5, alternative = "less", conf.level = 0.95)
binom.test(10, 1787, p = 0.01, alternative = "less", conf.level = 0.95)
a <- 0.01
s <- 100
s <- 0.04
n <- 100
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
assumed <- a
Zleft <- (left-assumed)/(s/sqrt(n))
Zright <-(right-assumed)/(s/sqrt(n))
p <- pnorm(Zright)-pnorm(Zleft)
1-p
power.t.test(n=100,delta=0,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=200,delta=0,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=500,delta=0,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=100,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=200,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=150,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=140,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=130,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=135,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=138,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=139,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
a <- 44
s <- 12
n <- 288
xbar <- 42.04
z <- (xbar-a)/(s/sqrt(n))
2*pnorm(-abs(z))
binom.test(3, 4, p = 0.5, alternative = "greater", conf.level = 0.95)
power.t.test(n=139,delta=0.01,sd=s,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=139,delta=0.01,sd=0.04,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=138,delta=0.01,sd=0.04,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
power.t.test(n=140,delta=0.01,sd=0.04,sig.level=0.05,type="one.sample",alternative="one.sided",strict = TRUE)
?z.test()
a <- 44
s <- 12
n <- 288
xbar <- 42.04
s
n
a
2*(1-pnorm(xbar,mean=a,sd=s/sqrt(20)))
(1-pnorm(xbar,mean=a,sd=s/sqrt(20)))
(1-pnorm(xbar,mean=a,sd=s/sqrt(n)))
2*(1-pnorm(xbar,mean=a,sd=s/sqrt(n)))
2*(1-pnorm(xbar,mean=a,sd=s/sqrt(n)))
install.packages("RMySQL")
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0, 1, 2), times = 10)
Try rep(c(0, 1, 2), each = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10,6)
tf <- num_vect[num_vect<1]
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
(my_char, collapse = " ")
paste(my_char, collapse = " ")
c(my_char, "Rajat")
my_name <- c(my_char, "Rajat")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste("X", "Y","Z" sep = "")
paste("X", "Y","Z", sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20, nrow=4,ncol = 5)
matrix(1:20, nrow=5,ncol = 4)
my_matrix2 <- matrix(1:20, nrow=5,ncol = 4)
my_matrix2 <- matrix(1:20, nrow=4,ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
library(manipulate)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
myHist <- function(mu,wt){}
myHist <- function(mu,wt){
}
myHis <- function(mu){
hist(x,col="blue",breaks=100)
lines(c(mu,mu),c(0,150), col="red",lwd=5)
mse <- mean(w(x-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHis(mu),mu=slider(62,74,step=0.5))
myHis <- function(mu){hist(x,col="blue",breaks=100)
+ lines(c(mu,mu),c(0,150), col="red",lwd=5)
+ mse <- mean(w(x-mu)^2)
+ text(63,150,paste("mu=",mu))
+ text(63,140,paste("MSE=",round(mse,2)))
library(usingR)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price)
abline(lm(price~carat, data=diamond))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
fit
fit[1]
coef(fit)[1]
prop.test(1, 9, p=0, correct=FALSE)
resid(fit)
sd(resid(fit))
z <- c(0.04086597,-0.02030878,-0.18806667,-0.26130455,0.27143544,0.16595545,0.25413964,0.01364175,-0.27635825)
sd(z)
summary(fit)
sqrt(sum(resid(fit)^2)/(7))
data(mtcars)
names(mtcars)
fit <- lm(mpg~wt, data=mtcars)
mean(mtcars$wt)
predict(fit,newdata = mean(mtcars$wt))
predict(fit,3.21725)
predict(fit,newdata = mean(wt))
coef(fit)[1] + coef(fit)[2]*mean(mtcars$wt)
coef(fit)[1] + coef(fit)[2]*3.21725
predict(fit,wt = 3.21725)
?predict
sumcoef <- summary(fit)$coeffcients
sumcoef[1,1] + c(-1,1)*qt(.975,df=fit$df)*sumcoef[1,2]
fit
sumcoef[2,1] + c(-1,1)*qt(.975,df=fit$df)*sumcoef[2,2]
mean(mtcars$wt)
newdata = data.frame(wt=3.21725)
predict(fit, newdata, interval="confidence")
?mtcars
newdata = data.frame(wt=3)
predict(fit, newdata, interval="confidence")
predict(fit, newdata, interval="prediction")
sumCoef<-summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit3$df)*sumCoef[2,2]
sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
fit1 <- lm(mpg~wt-1,data=mtcars)
fit1
sum(fit$residuals^2)
sum(fit1$residuals^2)/sum(fit$residuals^2)
summary(fit)
summary(fit1)
anova(fit1)
mean((mt$mpg-fitted(fit))^2)
mean((mtcars$mpg-fitted(fit))^2)
mean((mtcars$mpg-fitted(fit1))^2)
sum((mtcars$mpg-fitted(fit1))^2)
sum((mtcars$mpg-fitted(fit))^2)
y1 <- (mt$mpg - (coef(fit)[1] + coef(fit)[2]*mtcars$wt))^2
y1 <- (mtcars$mpg - (coef(fit)[1] + coef(fit)[2]*mtcars$wt))^2
coef(fit1)[2]
coef(fit1)[1]
y2 <- (mtcars$mpg - (coef(fit)[1]*mtcars$wt))^2
sum(y2)/sum(y1)
fit
fit1
y2 <- (mtcars$mpg - (coef(fit1)[1]*mtcars$wt))^2
sum(y2)/sum(y1)
fit <- lm(mpg ~ wt + cyl)
fit <- lm(mpg ~ wt + cyl, data=mtcars)
fit
4*-1.508
fit1 <- lm(mpg ~ cyl + wt, data=mtcars)
fit1
-1.508*4
multiple.regression.with.ci(fit)
fit$coefficients["cyl"]
-1.507795*4
fit2 <- lm(wt ~ cyl, data=mtcars)
fit2
0.4287*4
-3.191*1.7148 -6.032
(0.4287*4 + 0.5646)*(-3.191) -1.508*4
(0.4287*8 + 0.5646)*(-3.191) -1.508*8
summary(fit)
factor(mtcars$cyl)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
round(hatvalues(fit)[1:5])
round(hatvalues(fit)[1:5],3)
round(hatvalues(fit)[1:7],3)
0.995 - 0.229
round(hatvalues(fit)[1:7],4)
round(dfbetas(fit)[1:5],4)
round(dfbetas(fit)[1:5,2],4)
library(MASS)
?shuttle
data(shuttle)
names(shuttle)
library(MASS)
dataset(shuttle)
data(shuttle)
names(shuttle)
glmFit <- glm(use ~ wind, data=shuttle, family=binomial(link="logit"))
exp(coefficients(glmFit))
Yhat    <- fitted(glmFit)
thresh  <- 0.5
YhatFac <- cut(Yhat, breaks=c(-Inf, thresh, Inf), labels=c("lo", "hi"))
cTab    <- table(Yfac, YhatFac)
cTab    <- table(shuttle$use, YhatFac)
addmargins(cTab)
sum(diag(cTab)) / sum(cTab)
library(vcd)
install.packages("vcd")
(cTab[1, 1] / cTab[1, 2]) / (cTab[2, 1] / cTab[2, 2])
library(vcd)
(OR <- oddsratio(cTab, log=FALSE))
names(shuttle)
fit
glmFit
b0 <- -0.25131
b1 <- -0.03181
shuttle$wind[1]
shuttle$wind[2]
p1 <- exp(b0 + b1)/(1+exp(b0 + b1))
p2 <- exp(b0)/(1+exp(b0))
p1/p2
exp(b0)
exp(b1)
o1 <- p1/(1-p1)
o2 <- p2/(1-p2)
o1/o2
shuttle$magn[2]
shuttle$magn[5]
shuttle$magn[10]
shuttle$magn[15]
shuttle$wind[10]
shuttle$wind[15]
glm
glmFit <- glm(use ~ wind, data=shuttle, family=binomial(link="logit"))
glmFit
glmFit <- glm((1-use) ~ wind, data=shuttle, family=binomial(link="logit"))
glmFit <- glm(I(1-use) ~ wind, data=shuttle, family=binomial(link="logit"))
shuttle$usemod <- 1- shuttle$use
data(InspectSprays)
?InspectSprays
‘??InspectSprays’
levels(InsectSprays$spray)
names(InspectSprays)
names(InsectSprays)
glm1 <- glm(count~spray,data=InsectSprays,family="poisson")
glm
glm1
glm1 <- glm(count~as.factor(spray),data=InsectSprays,family="poisson")
glm1
names(InsectSprays)
exp(0)
exp(0.05588)
1/exp(0.05588)
-0.03077/-0.03077
-0.03077/1.0823
exp(-0.02843019)
1.0823/-0.03077
exp(-35.17387)
1.0823 + 0.03077
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
knots <- c(0,0)
sterms <- sapply(knots,function(knot) (x>knot)*(x-knot))
xmat <- cbind(1,x,sterms)
yhat <- predict(lm(y-xMat-1))
yhat <- predict(lm(y-xmat-1))
yhat <- predict(lm(y~xmat-1))
yhat
lm(y~xmat-1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
install.packages("Hmisc")
mixtures$index -> 1:nrow(mixtures)
mixtures$index1 -> 1:nrow(mixtures)
nrow(mixtures)
mixtures$index1 -> 1:1030
library(Hmisc)
cutmix <- cut2(training$CompressiveStrength,g=3)
plot(mixtures$CompressiveStrength, 1030, col=cutmix)
plot(mixtures$CompressiveStrength, col=cutmix)
names(mixture)
names(mixtures)
table(cutmix,training$Cement)
names(mixtures)
table(cutmix,training$Age)
t1 <- table(cutmix,training$Age)
prop.table(t1,1)
names(mixtures)
featurePlot(x=training[,c("FlyAsh","Age","water")],y=training$CompressiveStrength,plot="pairs")
featurePlot(x=training[,c("FlyAsh","Age","Water")],y=training$CompressiveStrength,plot="pairs")
setwd("C:/Coursera/Data Analysis/JHU Course 9/RefProject")
